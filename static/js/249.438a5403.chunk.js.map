{"version":3,"file":"static/js/249.438a5403.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SingleComicPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n    const {comicId} = useParams();\r\n    const [comic, setComic] = useState(null);\r\n    const {loading, error, getComic, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateComic()\r\n    }, [comicId])\r\n\r\n    const updateComic = () => {\r\n        clearError();\r\n        getComic(comicId)\r\n            .then(onComicLoaded)\r\n    }\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null;\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Comics Book\"\r\n                    />\r\n                <title>Single Comic Page</title>\r\n            </Helmet>\r\n            <AppBanner/>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n    const {title, description, pageCount, thumbnail, language, price} = comic;\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: {language}</p>\r\n                <div className=\"single-comic__price\">{price}</div>\r\n            </div>\r\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=8fe8b975ace4b743fb57d257e589834b';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}"],"names":["className","src","avengers","alt","avengersLogo","style","display","width","height","objectFit","margin","img","View","comic","title","description","pageCount","thumbnail","language","price","to","comicId","useParams","useState","setComic","useMarvelService","loading","error","getComic","clearError","useEffect","updateComic","then","onComicLoaded","errorMessage","ErrorMessage","spinner","Spinner","content","Helmet","name","AppBanner","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","getCharacter","id","getAllComics","_transformComics","char","slice","path","extension","homepage","urls","wiki","comics","items","textObjects","prices"],"sourceRoot":""}