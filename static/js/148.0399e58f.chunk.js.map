{"version":3,"file":"static/js/148.0399e58f.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SingleCharacterPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport './singleCharacterPage.scss';\r\n\r\nconst SingleCharacterPage = () => {\r\n        const {id} = useParams();\r\n        const [data, setData] = useState(null);\r\n        const {loading, error, getComic, getCharacter, clearError} = useMarvelService();\r\n\r\n        useEffect(() => {\r\n            updateData()\r\n        }, [id])\r\n\r\n        const updateData = () => {\r\n            clearError();\r\n            getCharacter(id)\r\n                .then(onDataLoaded);\r\n        }\r\n\r\n        const onDataLoaded = (data) => {\r\n            setData(data);\r\n        }\r\n\r\n        const errorMessage = error ? <ErrorMessage/> : null;\r\n        const spinner = loading ? <Spinner/> : null;\r\n        const content = !(loading || error || !data) ? <Viev data={data}/> : null;\r\n\r\n        return (\r\n            <>\r\n                <Helmet>\r\n                    <meta\r\n                        name=\"description\"\r\n                        content=\"Character description\"\r\n                        />\r\n                    <title>Single Character Page</title>\r\n                </Helmet>\r\n                <AppBanner/>\r\n                {errorMessage}\r\n                {spinner}\r\n                {content}\r\n            </>\r\n        )\r\n}\r\n\r\nconst Viev = ({data}) => {\r\n\r\n    const {name, description, thumbnail} = data;\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={name} className=\"single-comic__char-img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{name}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleCharacterPage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=8fe8b975ace4b743fb57d257e589834b';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}"],"names":["className","src","avengers","alt","avengersLogo","style","display","width","height","objectFit","margin","img","Viev","data","name","description","thumbnail","id","useParams","useState","setData","useMarvelService","loading","error","getCharacter","getComic","clearError","useEffect","updateData","then","onDataLoaded","errorMessage","ErrorMessage","spinner","Spinner","content","Helmet","AppBanner","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","message","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","getAllComics","_transformComics","char","slice","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}